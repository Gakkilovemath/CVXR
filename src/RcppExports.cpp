// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cvxr.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// CVXcanon__solve
SEXP CVXcanon__solve(int sense, Rcpp::XPtr<LinOp> objective, Rcpp::XPtr<LinOpVector> constraintsLinOpVector, SEXP solverOptions);
RcppExport SEXP _cvxr_CVXcanon__solve(SEXP senseSEXP, SEXP objectiveSEXP, SEXP constraintsLinOpVectorSEXP, SEXP solverOptionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sense(senseSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<LinOp> >::type objective(objectiveSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<LinOpVector> >::type constraintsLinOpVector(constraintsLinOpVectorSEXP);
    Rcpp::traits::input_parameter< SEXP >::type solverOptions(solverOptionsSEXP);
    rcpp_result_gen = Rcpp::wrap(CVXcanon__solve(sense, objective, constraintsLinOpVector, solverOptions));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__new
SEXP LinOp__new();
RcppExport SEXP _cvxr_LinOp__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LinOp__new());
    return rcpp_result_gen;
END_RCPP
}
// LinOp__get_sparse
bool LinOp__get_sparse(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_sparse(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_sparse(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_sparse
void LinOp__set_sparse(SEXP xp, SEXP sparseSEXP);
RcppExport SEXP _cvxr_LinOp__set_sparse(SEXP xpSEXP, SEXP sparseSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sparseSEXP(sparseSEXPSEXP);
    LinOp__set_sparse(xp, sparseSEXP);
    return R_NilValue;
END_RCPP
}
// LinOp__get_sparse_data
Eigen::SparseMatrix<double> LinOp__get_sparse_data(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_sparse_data(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_sparse_data(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_sparse_data
void LinOp__set_sparse_data(SEXP xp, SEXP sparseMat);
RcppExport SEXP _cvxr_LinOp__set_sparse_data(SEXP xpSEXP, SEXP sparseMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sparseMat(sparseMatSEXP);
    LinOp__set_sparse_data(xp, sparseMat);
    return R_NilValue;
END_RCPP
}
// LinOp__get_dense_data
Eigen::MatrixXd LinOp__get_dense_data(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_dense_data(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_dense_data(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_dense_data
void LinOp__set_dense_data(SEXP xp, SEXP denseMat);
RcppExport SEXP _cvxr_LinOp__set_dense_data(SEXP xpSEXP, SEXP denseMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type denseMat(denseMatSEXP);
    LinOp__set_dense_data(xp, denseMat);
    return R_NilValue;
END_RCPP
}
// LinOp__get_size
std::vector<int> LinOp__get_size(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_size(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_size(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__set_size
void LinOp__set_size(SEXP xp, Rcpp::IntegerVector value);
RcppExport SEXP _cvxr_LinOp__set_size(SEXP xpSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type value(valueSEXP);
    LinOp__set_size(xp, value);
    return R_NilValue;
END_RCPP
}
// LinOp__args_push_back
void LinOp__args_push_back(SEXP xp, SEXP yp);
RcppExport SEXP _cvxr_LinOp__args_push_back(SEXP xpSEXP, SEXP ypSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yp(ypSEXP);
    LinOp__args_push_back(xp, yp);
    return R_NilValue;
END_RCPP
}
// LinOp__size_push_back
void LinOp__size_push_back(SEXP xp, int intVal);
RcppExport SEXP _cvxr_LinOp__size_push_back(SEXP xpSEXP, SEXP intValSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type intVal(intValSEXP);
    LinOp__size_push_back(xp, intVal);
    return R_NilValue;
END_RCPP
}
// LinOp__set_type
void LinOp__set_type(SEXP xp, int typeValue);
RcppExport SEXP _cvxr_LinOp__set_type(SEXP xpSEXP, SEXP typeValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type typeValue(typeValueSEXP);
    LinOp__set_type(xp, typeValue);
    return R_NilValue;
END_RCPP
}
// LinOp__get_type
int LinOp__get_type(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_type(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_type(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__slice_push_back
void LinOp__slice_push_back(SEXP xp, std::vector<int> intVec);
RcppExport SEXP _cvxr_LinOp__slice_push_back(SEXP xpSEXP, SEXP intVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type intVec(intVecSEXP);
    LinOp__slice_push_back(xp, intVec);
    return R_NilValue;
END_RCPP
}
// LinOp__get_slice
std::vector<std::vector<int> > LinOp__get_slice(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_slice(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_slice(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOp__get_id
std::string LinOp__get_id(SEXP xp);
RcppExport SEXP _cvxr_LinOp__get_id(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp__get_id(xp));
    return rcpp_result_gen;
END_RCPP
}
// LinOpVector__new
SEXP LinOpVector__new();
RcppExport SEXP _cvxr_LinOpVector__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LinOpVector__new());
    return rcpp_result_gen;
END_RCPP
}
// LinOpVector__push_back
void LinOpVector__push_back(SEXP xp, SEXP yp);
RcppExport SEXP _cvxr_LinOpVector__push_back(SEXP xpSEXP, SEXP ypSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yp(ypSEXP);
    LinOpVector__push_back(xp, yp);
    return R_NilValue;
END_RCPP
}
// LinOp_at_index
SEXP LinOp_at_index(SEXP lvec, int i);
RcppExport SEXP _cvxr_LinOp_at_index(SEXP lvecSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lvec(lvecSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(LinOp_at_index(lvec, i));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__new
SEXP ProblemData__new();
RcppExport SEXP _cvxr_ProblemData__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ProblemData__new());
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__getV
std::vector<double> ProblemData__getV(SEXP xp);
RcppExport SEXP _cvxr_ProblemData__getV(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__getV(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_V
void ProblemData__set_V(SEXP xp, std::vector<double> vp);
RcppExport SEXP _cvxr_ProblemData__set_V(SEXP xpSEXP, SEXP vpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vp(vpSEXP);
    ProblemData__set_V(xp, vp);
    return R_NilValue;
END_RCPP
}
// ProblemData__getConstVec
std::vector<double> ProblemData__getConstVec(SEXP xp);
RcppExport SEXP _cvxr_ProblemData__getConstVec(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__getConstVec(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_const_vec
void ProblemData__set_const_vec(SEXP xp, std::vector<double> cvp);
RcppExport SEXP _cvxr_ProblemData__set_const_vec(SEXP xpSEXP, SEXP cvpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cvp(cvpSEXP);
    ProblemData__set_const_vec(xp, cvp);
    return R_NilValue;
END_RCPP
}
// ProblemData__getI
std::vector<int> ProblemData__getI(SEXP xp);
RcppExport SEXP _cvxr_ProblemData__getI(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__getI(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_I
void ProblemData__set_I(SEXP xp, std::vector<int> ip);
RcppExport SEXP _cvxr_ProblemData__set_I(SEXP xpSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ip(ipSEXP);
    ProblemData__set_I(xp, ip);
    return R_NilValue;
END_RCPP
}
// ProblemData__getJ
std::vector<int> ProblemData__getJ(SEXP xp);
RcppExport SEXP _cvxr_ProblemData__getJ(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__getJ(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_J
void ProblemData__set_J(SEXP xp, std::vector<int> jp);
RcppExport SEXP _cvxr_ProblemData__set_J(SEXP xpSEXP, SEXP jpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type jp(jpSEXP);
    ProblemData__set_J(xp, jp);
    return R_NilValue;
END_RCPP
}
// ProblemData__get_id_to_col
std::map<int, int> ProblemData__get_id_to_col(SEXP xp);
RcppExport SEXP _cvxr_ProblemData__get_id_to_col(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_id_to_col(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_id_to_col
void ProblemData__set_id_to_col(SEXP xp, Rcpp::IntegerVector iv);
RcppExport SEXP _cvxr_ProblemData__set_id_to_col(SEXP xpSEXP, SEXP ivSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type iv(ivSEXP);
    ProblemData__set_id_to_col(xp, iv);
    return R_NilValue;
END_RCPP
}
// ProblemData__get_const_to_row
std::map<int, int> ProblemData__get_const_to_row(SEXP xp);
RcppExport SEXP _cvxr_ProblemData__get_const_to_row(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(ProblemData__get_const_to_row(xp));
    return rcpp_result_gen;
END_RCPP
}
// ProblemData__set_const_to_row
void ProblemData__set_const_to_row(SEXP xp, Rcpp::IntegerVector iv);
RcppExport SEXP _cvxr_ProblemData__set_const_to_row(SEXP xpSEXP, SEXP ivSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type iv(ivSEXP);
    ProblemData__set_const_to_row(xp, iv);
    return R_NilValue;
END_RCPP
}
// Solution__new
SEXP Solution__new();
RcppExport SEXP _cvxr_Solution__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Solution__new());
    return rcpp_result_gen;
END_RCPP
}
// Solution__get_status
int Solution__get_status(SEXP xp);
RcppExport SEXP _cvxr_Solution__get_status(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Solution__get_status(xp));
    return rcpp_result_gen;
END_RCPP
}
// Solution__get_optimal_value
double Solution__get_optimal_value(SEXP xp);
RcppExport SEXP _cvxr_Solution__get_optimal_value(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Solution__get_optimal_value(xp));
    return rcpp_result_gen;
END_RCPP
}
// Solution__get_primal_values
std::map<int, Eigen::MatrixXd> Solution__get_primal_values(SEXP xp);
RcppExport SEXP _cvxr_Solution__get_primal_values(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Solution__get_primal_values(xp));
    return rcpp_result_gen;
END_RCPP
}
// Solution__get_dual_values
std::map<int, Eigen::MatrixXd> Solution__get_dual_values(SEXP xp);
RcppExport SEXP _cvxr_Solution__get_dual_values(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Solution__get_dual_values(xp));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _cvxr_LinOp__push_back(SEXP, SEXP);
RcppExport SEXP _cvxr_LinOp__set_slice(SEXP, SEXP);
RcppExport SEXP rcppFn(SEXP);
RcppExport SEXP rcppFn(SEXP, SEXP);
RcppExport SEXP rcppFn(SEXP);
RcppExport SEXP rcppFn(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_cvxr_CVXcanon__solve", (DL_FUNC) &_cvxr_CVXcanon__solve, 4},
    {"_cvxr_LinOp__new", (DL_FUNC) &_cvxr_LinOp__new, 0},
    {"_cvxr_LinOp__get_sparse", (DL_FUNC) &_cvxr_LinOp__get_sparse, 1},
    {"_cvxr_LinOp__set_sparse", (DL_FUNC) &_cvxr_LinOp__set_sparse, 2},
    {"_cvxr_LinOp__get_sparse_data", (DL_FUNC) &_cvxr_LinOp__get_sparse_data, 1},
    {"_cvxr_LinOp__set_sparse_data", (DL_FUNC) &_cvxr_LinOp__set_sparse_data, 2},
    {"_cvxr_LinOp__get_dense_data", (DL_FUNC) &_cvxr_LinOp__get_dense_data, 1},
    {"_cvxr_LinOp__set_dense_data", (DL_FUNC) &_cvxr_LinOp__set_dense_data, 2},
    {"_cvxr_LinOp__get_size", (DL_FUNC) &_cvxr_LinOp__get_size, 1},
    {"_cvxr_LinOp__set_size", (DL_FUNC) &_cvxr_LinOp__set_size, 2},
    {"_cvxr_LinOp__args_push_back", (DL_FUNC) &_cvxr_LinOp__args_push_back, 2},
    {"_cvxr_LinOp__size_push_back", (DL_FUNC) &_cvxr_LinOp__size_push_back, 2},
    {"_cvxr_LinOp__set_type", (DL_FUNC) &_cvxr_LinOp__set_type, 2},
    {"_cvxr_LinOp__get_type", (DL_FUNC) &_cvxr_LinOp__get_type, 1},
    {"_cvxr_LinOp__slice_push_back", (DL_FUNC) &_cvxr_LinOp__slice_push_back, 2},
    {"_cvxr_LinOp__get_slice", (DL_FUNC) &_cvxr_LinOp__get_slice, 1},
    {"_cvxr_LinOp__get_id", (DL_FUNC) &_cvxr_LinOp__get_id, 1},
    {"_cvxr_LinOpVector__new", (DL_FUNC) &_cvxr_LinOpVector__new, 0},
    {"_cvxr_LinOpVector__push_back", (DL_FUNC) &_cvxr_LinOpVector__push_back, 2},
    {"_cvxr_LinOp_at_index", (DL_FUNC) &_cvxr_LinOp_at_index, 2},
    {"_cvxr_ProblemData__new", (DL_FUNC) &_cvxr_ProblemData__new, 0},
    {"_cvxr_ProblemData__getV", (DL_FUNC) &_cvxr_ProblemData__getV, 1},
    {"_cvxr_ProblemData__set_V", (DL_FUNC) &_cvxr_ProblemData__set_V, 2},
    {"_cvxr_ProblemData__getConstVec", (DL_FUNC) &_cvxr_ProblemData__getConstVec, 1},
    {"_cvxr_ProblemData__set_const_vec", (DL_FUNC) &_cvxr_ProblemData__set_const_vec, 2},
    {"_cvxr_ProblemData__getI", (DL_FUNC) &_cvxr_ProblemData__getI, 1},
    {"_cvxr_ProblemData__set_I", (DL_FUNC) &_cvxr_ProblemData__set_I, 2},
    {"_cvxr_ProblemData__getJ", (DL_FUNC) &_cvxr_ProblemData__getJ, 1},
    {"_cvxr_ProblemData__set_J", (DL_FUNC) &_cvxr_ProblemData__set_J, 2},
    {"_cvxr_ProblemData__get_id_to_col", (DL_FUNC) &_cvxr_ProblemData__get_id_to_col, 1},
    {"_cvxr_ProblemData__set_id_to_col", (DL_FUNC) &_cvxr_ProblemData__set_id_to_col, 2},
    {"_cvxr_ProblemData__get_const_to_row", (DL_FUNC) &_cvxr_ProblemData__get_const_to_row, 1},
    {"_cvxr_ProblemData__set_const_to_row", (DL_FUNC) &_cvxr_ProblemData__set_const_to_row, 2},
    {"_cvxr_Solution__new", (DL_FUNC) &_cvxr_Solution__new, 0},
    {"_cvxr_Solution__get_status", (DL_FUNC) &_cvxr_Solution__get_status, 1},
    {"_cvxr_Solution__get_optimal_value", (DL_FUNC) &_cvxr_Solution__get_optimal_value, 1},
    {"_cvxr_Solution__get_primal_values", (DL_FUNC) &_cvxr_Solution__get_primal_values, 1},
    {"_cvxr_Solution__get_dual_values", (DL_FUNC) &_cvxr_Solution__get_dual_values, 1},
    {"_cvxr_LinOp__push_back",       (DL_FUNC) &_cvxr_LinOp__push_back,       2},
    {"_cvxr_LinOp__set_slice",       (DL_FUNC) &_cvxr_LinOp__set_slice,       2},
    {"rcppFn",                       (DL_FUNC) &rcppFn,                       1},
    {"rcppFn",                       (DL_FUNC) &rcppFn,                       2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cvxr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
